#!/usr/bin/env python3
"""
Script to create test fixtures from real iMessage attributed body data.
This extracts binary data from hex strings and creates test fixtures.
"""

import os
import json
from pathlib import Path

# Test data from the database
test_cases = [
    {
        "name": "simple_message",
        "description": "Simple text message with basic attributed body",
        "hex_data": "040B73747265616D747970656481E803840140848484124E5341747472696275746564537472696E67008484084E534F626A656374008592848484084E53537472696E67019484012B11416C7761797320612070617472696F742086840269490111928484840C4E5344696374696F6E617279009484016901928496961D5F5F6B494D4D657373616765506172744174747269627574654E616D658692848484084E534E756D626572008484074E5356616C7565009484012A84999900868686",
        "expected_text": "Always a patriot"
    },
    {
        "name": "complex_message_with_emoji",
        "description": "Message with emojis and special characters",
        "hex_data
        "expected_text": "Daily Quordle 102\n9🟨🟨🟨🟨\n7🟨🟨🟨🟨\nquordle.com\n🏈⬜⬜⬜⬜ ⬜🏉🏉⬜⬜\n⬜⬜🏉⬜⬜ 🏈⬜⬜⬜⬜\n⬜⬜⬜⬜⬜ ⬜⬜⬜⬜🏉\n⬜⬜⬜⬜⬜ 🏉🏉🏉🏉🏉\n⬜⬜⬜⬜⬜ ⬛⬛⬛⬛⬛\n⬜⬜⬜⬜⬜ ⬛⬛⬛⬛⬛\n⬜⬜⬜⬜⬜ ⬛⬛⬛⬛⬛\n⬜⬜⬜⬜⬜ ⬛⬛⬛⬛⬛\n🏉🏉🏉🏉🏉 ⬛⬛⬛⬛⬛\n\n⬜🏉⬜⬜⬜ ⬜⬜⬜⬜⬜\n⬜⬜⬜⬜⬜ 🏈⬜⬜⬜⬜\n⬜⬜⬜⬜⬜ ⬜⬜⬜🏈⬜\n⬜🏉⬜⬜⬜ 🏈⬜⬜⬜⬜\n🏈🏉⬜⬜🏉 ⬜⬜🏈⬜⬜\n🏉🏉🏉🏈🏉 ⬜⬜⬜⬜⬜\n🏉🏉🏉🏉🏉 ⬜⬜⬜⬜⬜\n⬛⬛⬛⬛⬛ 🏉🏉🏉🏉🏉\nBarely made it"
    },
    {
        "name": "question_message",
        "description": "Message with question marks and special characters",
        "hex_data": "040B73747265616D747970656481E803840140848484124E5341747472696275746564537472696E67008484084E534F626A656374008592848484084E53537472696E67019484012B7657686174E280997320796F757220666C696768743F3F2049E280996D20686572652074696C203733302E2049E280996C6C2074727920746F2067657420612073686F75746F757420616E642074656C6C207468652050696C6F74E280997320796F75206E656564206C6F7473206F6620626F6F7A65208684026949016E928484840C4E5344696374696F6E617279009484016901928496961D5F5F6B494D4D657373616765506172744174747269627574654E616D658692848484084E534E756D626572008484074E5356616C7565009484012A84999900868686",
        "expected_text": "What's your flight?? I'm here til 730. I'll try to get a shoutout and tell the Pilot's you need lots of booze"
    },
    {
        "name": "group_message",
        "description": "Message from a group chat",
        "hex_data": "040B73747265616D747970656481E803840140848484124E5341747472696275746564537472696E67008484084E534F626A656374008592848484084E53537472696E67019484012B374C6F7264204265636B65747420697320646566696E6974656C7920746865206163636F756E7420696E207468652067726F7570206C6F6C86840269490137928484840C4E5344696374696F6E617279009484016901928496961D5F5F6B494D4D657373616765506172744174747269627574654E616D658692848484084E534E756D626572008484074E5356616C7565009484012A84999900868686",
        "expected_text": "Lord Beckett is definitely the account in the group lol"
    }
]

def hex_to_binary(hex_string):
    """Convert hex string to binary data."""
    return bytes.fromhex(hex_string)

def create_fixtures():
    """Create test fixtures from the test cases."""
    fixtures_dir = Path("/Users/chrispatten/workspace/haven/hostagent/Tests/IMessagesTests/Fixtures")
    fixtures_dir.mkdir(exist_ok=True)
    
    for case in test_cases:
        # Create binary file
        binary_data = hex_to_binary(case["hex_data"])
        binary_file = fixtures_dir / f"{case['name']}.bin"
        with open(binary_file, 'wb') as f:
            f.write(binary_data)
        
        # Create metadata file
        metadata = {
            "name": case["name"],
            "description": case["description"],
            "expected_text": case["expected_text"],
            "binary_file": f"{case['name']}.bin",
            "size_bytes": len(binary_data)
        }
        
        metadata_file = fixtures_dir / f"{case['name']}.json"
        with open(metadata_file, 'w') as f:
            json.dump(metadata, f, indent=2)
        
        print(f"Created fixture: {case['name']} ({len(binary_data)} bytes)")

if __name__ == "__main__":
    create_fixtures()
